{"version":3,"sources":["Timer.jsx","Countdown.jsx","CountdownContainer.jsx","App.jsx","serviceWorker.js","index.jsx","app.module.scss"],"names":["Timer","useState","msec","sec","min","hrs","time","setTime","interv","setInterv","status","setStatus","updatedMs","updatedS","updatedM","updatedH","run","className","classes","timeCounter","buttons","button","onClick","setInterval","clearInterval","CountDown","props","activePart","silder","keys","max","step","name","defaultValue","sliderValue","onChange","handleChange","disabled","countdown","inputArea","inputs","type","value","minutes","handleInputChange","seconds","CountdownContainer","statuses","setSlider","minValue","secValue","perc","setPerc","setKeys","sliderMinutes","Math","floor","updateMS","valueNum","Number","updatedValue","percentage","ceil","myAudio","useRef","stop","reset","current","play","span","event","currentTarget","progress","percent","src","ref","preload","id","App","TabPane","Tabs","section","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9581fa3a.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-plusplus */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport classes from './app.module.scss';\r\n\r\nconst Timer = () => {\r\n  const [time, setTime] = useState({\r\n    msec: 0,\r\n    sec: 0,\r\n    min: 0,\r\n    hrs: 0,\r\n  });\r\n  const [interv, setInterv] = useState();\r\n  const [status, setStatus] = useState(0);\r\n\r\n  let updatedMs = time.msec;\r\n  let updatedS = time.sec;\r\n  let updatedM = time.min;\r\n  let updatedH = time.hrs;\r\n\r\n  const run = () => {\r\n    if (updatedM === 60) {\r\n      updatedH++;\r\n      updatedM = 0;\r\n    }\r\n    if (updatedS === 60) {\r\n      updatedM++;\r\n      updatedS = 0;\r\n    }\r\n    if (updatedMs === 99) {\r\n      updatedS++;\r\n      updatedMs = 0;\r\n    }\r\n    updatedMs++;\r\n    return setTime({\r\n      msec: updatedMs,\r\n      sec: updatedS,\r\n      min: updatedM,\r\n      hrs: updatedH,\r\n    });\r\n  };\r\n\r\n  const start = () => {\r\n    run();\r\n    setStatus(1);\r\n    setInterv(setInterval(run, 10));\r\n  };\r\n\r\n  const stop = () => {\r\n    clearInterval(interv);\r\n    setStatus(0);\r\n  };\r\n\r\n  const reset = () => {\r\n    clearInterval(interv);\r\n    setStatus(0);\r\n    setTime({\r\n      msec: 0, sec: 0, min: 0, hrs: 0,\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.timeCounter}>\r\n        <span>{time.min >= 10 ? time.min : `0${time.min}`}</span>\r\n        &nbsp;:&nbsp;\r\n        <span>{time.sec >= 10 ? time.sec : `0${time.sec}`}</span>\r\n        &nbsp;:&nbsp;\r\n        <span>{time.msec >= 10 ? time.msec : `0${time.msec}`}</span>\r\n      </div>\r\n      <div className={classes.buttons}>\r\n        {status === 0 ? (\r\n          <Button className={classes.button} onClick={start}>\r\n            Запустить\r\n          </Button>\r\n        ) : (\r\n          <Button className={classes.button} onClick={stop}>\r\n            Остановить\r\n          </Button>\r\n        )}\r\n        <Button className={classes.button} onClick={reset}>\r\n          Сброс\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Timer;\r\n","/* eslint-disable arrow-body-style */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/destructuring-assignment */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Slider } from 'antd';\nimport classes from './app.module.scss';\n\nconst CountDown = (props) => {\n  return (\n    <div className={classes.activePart}>\n      <div>\n        <div className={classes.silder}>\n          {props.keys === 'START' ? (\n            <Slider\n              max={3600}\n              min={0}\n              step={15}\n              name=\"min\"\n              defaultValue={props.sliderValue}\n              onChange={props.handleChange}\n            />\n          ) : (\n            <Slider\n              max={60}\n              min={0}\n              name=\"min\"\n              defaultValue={props.sliderValue}\n              onChange={props.handleChange}\n              disabled\n            />\n          )}\n        </div>\n        <div className={classes.countdown}>\n          <div className={classes.inputArea}>\n            <div className={classes.inputs}>\n              <input\n                type=\"text\"\n                name=\"min\"\n                value={props.minutes || 0}\n                onChange={props.handleInputChange}\n              />\n              <input\n                type=\"text\"\n                name=\"sec\"\n                value={props.seconds || 0}\n                onChange={props.handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCountDown.propTypes = {\n  keys: PropTypes.number,\n  handleInputChange: PropTypes.func,\n  seconds: PropTypes.number,\n  minutes: PropTypes.number,\n  handleChange: PropTypes.func,\n  sliderValue: PropTypes.number,\n};\n\nexport default CountDown;\n","/* eslint-disable arrow-parens */\n/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable jsx-a11y/media-has-caption */\n/* eslint-disable no-plusplus */\n\nimport React, { useState, useRef } from 'react';\nimport { Progress, Button } from 'antd';\nimport CountDown from './Countdown';\nimport classes from './app.module.scss';\n\nconst CountdownContainer = () => {\n  const statuses = {\n    PAUSE: 'PAUSE',\n    START: 'START',\n    RESET: 'RESET',\n    RESUME: 'RESUME',\n  };\n  const [time, setTime] = useState({\n    min: 0,\n    sec: 0,\n  });\n  const handleInputChange = event => {\n    setTime({\n      ...time,\n      [event.currentTarget.name]: Number(event.currentTarget.value),\n    });\n  };\n  const [sliderValue, setSlider] = useState({\n    min: 0,\n  });\n\n  const handleChange = event => {\n    setSlider({\n      ...sliderValue,\n      min: Number(event),\n    });\n    if (event === 3600) {\n      time.min = 60;\n      time.sec = 0;\n    }\n    if (event === 0) {\n      time.min = 0;\n      time.sec = 0;\n    }\n  };\n\n  const [perc, setPerc] = useState({\n    minValue: 0,\n    secValue: 0,\n  });\n  const [interv, setInterv] = useState();\n  const [keys, setKeys] = useState(statuses.START);\n  const sliderMinutes = sliderValue.min;\n\n  let updatedS = time.sec;\n\n  let updatedM = time.min;\n  if (sliderMinutes !== 0) {\n    time.min = Math.floor(sliderMinutes / 60);\n    time.sec = sliderMinutes - time.min * 60;\n  }\n  let updateMS = 0;\n\n  const valueNum = Number(perc.minValue * 60 + perc.secValue + 1);\n  const updatedValue = Number(updatedM * 60 + updatedS);\n  const percentage = Math.ceil(100 - (updatedValue * 100) / valueNum);\n\n  const myAudio = useRef();\n\n  const handleBeep = () => {\n    if (myAudio.current !== null) {\n      myAudio.current.play();\n    }\n    return myAudio.current.play();\n  };\n\n  if (updatedS > 59) {\n    updatedM += 1;\n    updatedS = 59;\n  }\n  if (updatedM > 720) {\n    updatedM = 719;\n  }\n\n  const stop = () => {\n    clearInterval(interv);\n    setKeys(statuses.RESUME);\n    setTime({\n      msec: updateMS,\n      sec: updatedS,\n      min: updatedM,\n    });\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setKeys(statuses.START);\n    setTime({\n      msec: 100,\n      sec: 0,\n      min: 0,\n    });\n  };\n\n  const run = () => {\n    if (updatedM === 0 && updatedS === 0) {\n      updatedM = 0;\n      updatedS = 0;\n      handleBeep();\n      return stop();\n    }\n    if (updatedS === 0) {\n      updatedM--;\n      updatedS = 59;\n    }\n    if (updateMS === 0) {\n      updatedS--;\n      updateMS = 99;\n    }\n    updateMS--;\n    return setTime({\n      msec: updateMS,\n      sec: updatedS,\n      min: updatedM,\n    });\n  };\n\n  const start = () => {\n    run();\n    setPerc({\n      minValue: updatedM,\n      secValue: updatedS,\n    });\n    setKeys(statuses.PAUSE);\n    setInterv(setInterval(run, 10));\n  };\n\n  const resume = () => {\n    run();\n    setKeys(statuses.PAUSE);\n    setInterv(setInterval(run, 10));\n  };\n\n  return (\n    <div>\n      <div className={classes.activePart}>\n        <div>\n          <div className={classes.countdown}>\n            <div className={classes.inputArea}>\n              {keys !== 'START' ? (\n                <div className={classes.span}>\n                  <span className={classes.span}>\n                    {`${updatedM >= 10 ? updatedM : `0${updatedM}`}` || '00'}\n                  </span>\n                  <span className={classes.span}>\n                    {`: ${updatedS >= 10 ? updatedS : `0${updatedS}`}` || '00'}\n                  </span>\n                </div>\n              ) : (\n                <CountDown\n                  keys={keys}\n                  minutes={updatedM}\n                  seconds={updatedS}\n                  handleInputChange={handleInputChange}\n                  value={time}\n                  handleChange={handleChange}\n                  sliderValue={sliderMinutes}\n                />\n              )}\n            </div>\n            <div className={classes.progress}>\n              <Progress type=\"circle\" percent={keys === 'START' ? 0 : percentage} />\n            </div>\n          </div>\n\n          {keys === 'START' ? (\n            <div className={classes.buttons}>\n              <Button className={classes.button} onClick={start}>\n                Запустить\n              </Button>\n            </div>\n          ) : (\n            ''\n          )}\n          {keys === 'PAUSE' ? (\n            <div className={classes.buttons}>\n              <Button className={classes.button} onClick={stop}>\n                Остановить\n              </Button>\n              <Button className={classes.button} onClick={reset}>\n                Сброс\n              </Button>\n            </div>\n          ) : (\n            ''\n          )}\n          {keys === 'RESUME' ? (\n            <div className={classes.buttons}>\n              <Button className={classes.button} onClick={resume}>\n                Запустить\n              </Button>\n              <Button className={classes.button} onClick={reset}>\n                Сброс\n              </Button>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n\n      <audio src=\"https://avto-life.club/alert.ogg\" ref={myAudio} preload=\"true\" id=\"1\" />\n    </div>\n  );\n};\n\nexport default CountdownContainer;\n","/* eslint-disable no-plusplus */\n\nimport React from 'react';\nimport { Tabs } from 'antd';\nimport classes from './app.module.scss';\nimport Timer from './Timer';\nimport CountdownContainer from './CountdownContainer';\n\nconst App = () => {\n  const { TabPane } = Tabs;\n  return (\n    <div className={classes.section}>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Timer\" key=\"1\">\n          <Timer />\n        </TabPane>\n        <TabPane tab=\"Countdown\" key=\"2\">\n          <CountdownContainer />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"app_section__Tr6YQ\",\"buttons\":\"app_buttons__3Pc3M\",\"button\":\"app_button__hx0oF\",\"timeCounter\":\"app_timeCounter__ceXvq\",\"activePart\":\"app_activePart__1Y3mu\",\"countdown\":\"app_countdown__1GwN1\",\"inputArea\":\"app_inputArea__3tpvM\",\"span\":\"app_span__1QfKU\",\"inputs\":\"app_inputs__9AnYw\",\"slider\":\"app_slider__12qx0\",\"progress\":\"app_progress__wrWuO\"};"],"sourceRoot":""}