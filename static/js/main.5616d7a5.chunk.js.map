{"version":3,"sources":["Timer.jsx","Countdown.jsx","CountdownContainer.jsx","App.jsx","serviceWorker.js","index.jsx","app.module.scss"],"names":["Timer","props","className","classes","timeCounter","time","min","sec","msec","buttons","status","button","onClick","start","stop","reset","CountDown","console","log","activePart","countdown","type","value","keys","progress","percent","CountdownContainer","myAudio","useRef","useState","setTime","interv","setInterv","setKeys","updatedS","updatedM","updateMS","clearInterval","current","play","run","setInterval","src","ref","crossOrigin","preload","id","controls","App","hrs","setStatus","updatedMs","updatedH","TabPane","Tabs","section","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5616d7a5.chunk.js","sourcesContent":["/* eslint-disable react/require-default-props */\r\n/* eslint-disable linebreak-style */\r\n\r\n/* eslint-disable react/destructuring-assignment */\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Button } from 'antd';\r\nimport classes from './app.module.scss';\r\n\r\nconst Timer = (props) => {\r\n  return (\r\n    <div>\r\n      <div className={classes.timeCounter}>\r\n        <span>{props.time.min >= 10 ? props.time.min : `0${props.time.min}`}</span>\r\n        &nbsp;:&nbsp;\r\n        <span>{props.time.sec >= 10 ? props.time.sec : `0${props.time.sec}`}</span>\r\n        &nbsp;:&nbsp;\r\n        <span>{props.time.msec >= 10 ? props.time.msec : `0${props.time.msec}`}</span>\r\n      </div>\r\n      <div className={classes.buttons}>\r\n        {props.status === 0 ? (\r\n          <Button className={classes.button} onClick={props.start}>\r\n            Запустить\r\n          </Button>\r\n        ) : (\r\n          <Button className={classes.button} onClick={props.stop}>\r\n            Остановить\r\n          </Button>\r\n        )}\r\n        <Button className={classes.button} onClick={props.reset}>\r\n          Сброс\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTimer.propTypes = {\r\n  status: PropTypes.number,\r\n  reset: PropTypes.func,\r\n  stop: PropTypes.func,\r\n  start: PropTypes.func,\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  time: PropTypes.object,\r\n};\r\n\r\nexport default Timer;","/* eslint-disable jsx-a11y/iframe-has-title */\n/* eslint-disable react/no-unknown-property */\n/* eslint-disable jsx-a11y/media-has-caption */\n/* eslint-disable arrow-body-style */\n/* eslint-disable react/require-default-props */\n/* eslint-disable linebreak-style */\n/* eslint-disable react/destructuring-assignment */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Progress } from 'antd';\nimport classes from './app.module.scss';\n\nconst CountDown = props => {\n  console.log(props);\n  return (\n    <div className={classes.activePart}>\n      <div>\n        <div className={classes.countdown}>\n          <input\n            type=\"text\"\n            value={`${props.value.min}`}\n          />\n          <input\n            type=\"text\"\n            value={`${\n              props.value.sec >= 10 ? props.value.sec : `0${props.value.sec}`\n            }`}\n          />\n        </div>\n        <div className={classes.buttons}>\n          {props.keys === 0 ? (\n            <Button className={classes.button} onClick={props.start}>\n              Запустить\n            </Button>\n          ) : (\n            <Button className={classes.button} onClick={props.stop}>\n              Остановить\n            </Button>\n          )}\n          <Button className={classes.button} onClick={props.reset}>\n            Сброс\n          </Button>\n        </div>\n      </div>\n      <div className={classes.progress}>\n        <Progress type=\"circle\" percent={75} />\n      </div>\n    </div>\n  );\n};\n\nCountDown.propTypes = {\n  keys: PropTypes.number,\n  reset: PropTypes.func,\n  stop: PropTypes.func,\n  start: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default CountDown;\n","/* eslint-disable jsx-a11y/media-has-caption */\n/* eslint-disable no-plusplus */\n\nimport React, { useState, useRef } from 'react';\nimport CountDown from './Countdown';\n\nconst CountdownContainer = () => {\n  const myAudio = useRef();\n\n  const handleBeep = () => {\n    if (myAudio.current !== null) {\n      myAudio.current.play();\n    }\n    return myAudio.current.play();\n  };\n  const [time, setTime] = useState({\n    sec: 1,\n    min: 1,\n    msec: 10,\n  });\n  const [interv, setInterv] = useState();\n  const [keys, setKeys] = useState(0);\n\n  let updatedS = time.sec;\n  let updatedM = time.min;\n  let updateMS = time.msec;\n\n  const stop = () => {\n    clearInterval(interv);\n    setKeys(0);\n    handleBeep();\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setKeys(0);\n    setTime({\n      msec: 100,\n      sec: 10,\n      min: 0,\n    });\n  };\n\n  const run = () => {\n    if (updatedM === 0 && updatedS === 0) {\n      updatedM = 0;\n      updatedS = 0;\n      return stop();\n    }\n    if (updatedS === 0) {\n      updatedM--;\n      updatedS = 59;\n    }\n    if (updateMS === 0) {\n      updatedS--;\n      updateMS = 99;\n    }\n    updateMS--;\n    return setTime({\n      msec: updateMS,\n      sec: updatedS,\n      min: updatedM,\n    });\n  };\n\n  const start = () => {\n    run();\n    setKeys(1);\n    setInterv(setInterval(run, 10));\n  };\n\n  return (\n    <div>\n      <CountDown keys={keys} value={time} reset={reset} stop={stop} start={start} time={time} />\n      <audio src=\"https://avto-life.club/alert.ogg\" ref={myAudio} crossOrigin=\"anonymous\" preload=\"true\" id=\"1\" controls />\n    </div>\n  );\n};\n\nexport default CountdownContainer;\n","/* eslint-disable no-plusplus */\n\nimport React, { useState } from 'react';\nimport { Tabs } from 'antd';\nimport classes from './app.module.scss';\nimport Timer from './Timer';\nimport CountdownContainer from './CountdownContainer';\n\nconst App = () => {\n  const [time, setTime] = useState({\n    msec: 0,\n    sec: 0,\n    min: 0,\n    hrs: 0,\n  });\n  const [interv, setInterv] = useState();\n  const [status, setStatus] = useState(0);\n\n  let updatedMs = time.msec;\n  let updatedS = time.sec;\n  let updatedM = time.min;\n  let updatedH = time.hrs;\n\n  const run = () => {\n    if (updatedM === 60) {\n      updatedH++;\n      updatedM = 0;\n    }\n    if (updatedS === 60) {\n      updatedM++;\n      updatedS = 0;\n    }\n    if (updatedMs === 99) {\n      updatedS++;\n      updatedMs = 0;\n    }\n    updatedMs++;\n    return setTime({\n      msec: updatedMs,\n      sec: updatedS,\n      min: updatedM,\n      hrs: updatedH,\n    });\n  };\n\n  const start = () => {\n    run();\n    setStatus(1);\n    setInterv(setInterval(run, 10));\n  };\n\n  const stop = () => {\n    clearInterval(interv);\n    setStatus(0);\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setStatus(0);\n    setTime({\n      msec: 0, sec: 0, min: 0, hrs: 0,\n    });\n  };\n\n  const { TabPane } = Tabs;\n  return (\n    <div className={classes.section}>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Timer\" key=\"1\">\n          <Timer\n            status={status}\n            reset={reset}\n            stop={stop}\n            start={start}\n            time={time}\n          />\n        </TabPane>\n        <TabPane tab=\"Countdown\" key=\"2\">\n          <CountdownContainer />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"app_section__Tr6YQ\",\"buttons\":\"app_buttons__3Pc3M\",\"button\":\"app_button__hx0oF\",\"timeCounter\":\"app_timeCounter__ceXvq\",\"activePart\":\"app_activePart__1Y3mu\",\"countdown\":\"app_countdown__1GwN1\",\"progress\":\"app_progress__wrWuO\"};"],"sourceRoot":""}